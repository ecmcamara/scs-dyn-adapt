module scs{
	module demos{
		module dynupdate
		{
			struct ComponentId {
				string name; /* O nome identificador do componente. */
				octet major_version; /* O número principal da versão. */
				octet minor_version; /* O número secundário da versão. */
				octet patch_version; /* O número de revisão da versão. */
				string platform_spec; /* A especificação da plataforma 
									  necessária para o funcionamento do 
									  componente. */
			};

			typedef sequence<octet> Code;

			struct NewFacetDescription {
				string name; /* O nome identificador da faceta ui:CU*/
				string interface_name; /* O nome identificador da interace da 
									   faceta ui:C*/
				Code facet_implementation; /* A implementação da faceta ui:CU*/
				Code facet_idl; /* A idl da faceta ui:C*/
			};
	
			struct FacetUpdateDescription{
				NewFacetDescription description; /* Descrição e implementação 
												 da nova faceta ui:CU*/
				Code patchUpCode;/* Código de aplicação da atualização ui:CU*/
				Code patchDownCode;/* Código de rollback da atualização */
				string key;/*Uma string para ser registrada como sendo a chave do objeto no ORB ui:C*/
			};

			typedef sequence<FacetUpdateDescription> FacetUpdateDescriptions;
			
			exception RawState { string msg; };
			exception CannotChangeState { string msg; };
			exception CannotFinishIfNotStarted { string msg; };

			interface IBackdoor{
				any Backdoor( in Code patch);
				string BackdoorAsync( in Code patch);
				any GetBackdoorAsyncRet (in string key);
			};

			interface IDynamicUpdatable{
				string GetUpdateState();
				boolean ChangeUpdateState(in string state);
				string StartUpdate() raises(CannotChangeState);
				string FinishUpdate() raises(CannotFinishIfNotStarted);

				string InsertFacet(in string updateKey, in FacetUpdateDescription facet);
				string InsertFacetAsync(in FacetUpdateDescription facet);
				
				FacetUpdateDescription RetrieveFacet(in string updateKey,in string facetName) raises(RawState);
				
				string UpdateFacet(in string updateKey,in FacetUpdateDescription facet);
				string UpdateFacetAsync(in FacetUpdateDescription facet);
				
				string DeleteFacet(in string updateKey,in string facetName);
				string DeleteFacetAsync(in string facetName);
				
				string UpdateComponent(in string updateKey,in ComponentId newId, 
					in FacetUpdateDescriptions facets);
				string UpdateComponentAsync(in ComponentId newId,
					in FacetUpdateDescriptions facets);
				
				string GetAsyncRet(in string key);

				boolean RollbackFacet(in string updateKey, in string facetName);

			};
		};
	};
};
